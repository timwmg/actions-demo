# This is a basic workflow to help you get started with Actions

name: Docker Publish Release

# Controls when the action will run. 
on:
  release:
    # Want to run the automation when a release is created
    types: ['created']

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  docker-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout source code
        uses: actions/checkout@v2

      #########################
      # Install Docker BuildX #
      #########################
      - name: Install Docker BuildX
        uses: docker/setup-buildx-action@v1

      ######################
      # Login to DockerHub #
      ######################
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      ######################################
      # Login to GitHub Container Registry #
      ######################################
      - name: Login to GitHub Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GCR_USERNAME }}
          password: ${{ secrets.GCR_TOKEN }}

      ####################
      # Config AWS Creds #
      ####################
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
      #################
      # Login AWS ECR #
      #################
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Update deployment API
      - name: start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Production
      
      # Create a GitHub Issue with the info from this build
      - name: Create GitHub Issue
        uses: actions/github-script@v3.1.0
        id: create-issue
        with:
          # https://octokit.github.io/rest.js/v18#issues-create
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const create = await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "New issue created",
              body: 'Heres some base data'
            })
            console.log('create', create)
            return create.data.number
      
      ###########################################
      # Build and Push containers to registries #
      ###########################################
      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lukas-python-test
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            admiralawkbar/python-builder:latest
            admiralawkbar/python-builder:v1
            admiralawkbar/python-builder:${{ github.event.release.tag_name }}
            ghcr.io/lukaspersonal/actions-demo:latest
            ghcr.io/lukaspersonal/actions-demo:v1
            ghcr.io/lukaspersonal/actions-demo:${{ github.event.release.tag_name }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:v1
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.event.release.tag_name }}
        
      # Update Deployment API
      - name: update deployment status
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://github.com/orgs/LukasPersonal/packages?repo_name=actions-demo
      
      - name: Update issue success
        uses: actions/github-script@v3.1.0
        if: success()
        with:
          # https://octokit.github.io/rest.js/v18#issues-create
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ steps.create-issue.outputs.result }}",
              title: "New issue created",
              body: "Successful!y deployed release ${{ github.event.release.tag_name }}"
            })
        
      - name: Update issue failure
        uses: actions/github-script@v3.1.0
        if: failure()
        with:
          # https://octokit.github.io/rest.js/v18#issues-create
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ steps.create-issue.outputs.result }}",
              title: "New issue created",
              body: "SuccessfulFailed to deploy release ${{ github.event.release.tag_name }}"
            })

